# nginx/default.conf

# HTTP Server block to handle incoming HTTP requests and redirect them to HTTPS
server {
    # Listen on port 80 for HTTP traffic
    listen 80;

    # Define the server names that this block will respond to
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # Location block to match all incoming requests
    location / {
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently status
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server block to handle secure HTTPS requests
server {
    # Listen on port 443 for HTTPS traffic with SSL enabled
    listen 443 ssl;

    # Define the server names that this block will respond to
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # SSL Configuration

    # Path to the SSL certificate file
    ssl_certificate /etc/nginx/certs/fullchain.pem;

    # Path to the SSL certificate's private key
    ssl_certificate_key /etc/nginx/certs/privkey.pem;

    # Specify the SSL protocols to use for secure connections
    ssl_protocols TLSv1.2 TLSv1.3;

    # Define the SSL ciphers to ensure strong encryption
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Buffer Settings to optimize handling of upstream responses
    proxy_buffer_size          128k;    # Buffer size for the first part of the response
    proxy_buffers              4 256k;  # Number and size of buffers for the response
    proxy_busy_buffers_size    256k;    # Maximum size of buffers that can be busy sending data
    proxy_temp_file_write_size 256k;   # Maximum size of data written to a temporary file

    # Location block to proxy all HTTPS requests to the Django application
    location / {
        # Proxy pass to the Django application running on the 'automagic' container at port 8000
        proxy_pass http://automagic:8000;

        # Preserve the original Host header from the client
        proxy_set_header Host $host;

        # Pass the client's real IP address to the Django application
        proxy_set_header X-Real-IP $remote_addr;

        # Pass the X-Forwarded-For header containing the client's IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Enable buffering of responses from the proxied server
        proxy_buffering on;

        # Enable gzip compression for proxied responses if the client supports it
        proxy_set_header Accept-Encoding "";
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    }
}
