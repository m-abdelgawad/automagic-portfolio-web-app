# nginx/default.conf

# =====================================================================
# HTTP Server Block
# =====================================================================
# This server block listens on port 80 (HTTP) and redirects all incoming
# traffic to HTTPS (port 443) to ensure secure communication.
# =====================================================================

server {
    # Listen on port 80 for incoming HTTP connections
    listen 80;
    
    # Define the server names that this block will respond to
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # Location block to handle all incoming requests
    location / {
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently status
        return 301 https://$host$request_uri;
    }

    # Optional: Serve a simple status page or health check endpoint
    # location /healthz {
    #     access_log off;
    #     return 200 'Healthy';
    #     add_header Content-Type text/plain;
    # }
}

# =====================================================================
# HTTPS Server Block
# =====================================================================
# This server block listens on port 443 (HTTPS) and handles secure
# connections. It proxies requests to the Django application running
# in the 'automagic' container on port 8000.
# =====================================================================

server {
    # Listen on port 443 with SSL and HTTP/2 enabled for improved performance
    listen 443 ssl http2;
    
    # Define the server names that this block will respond to
    server_name automagicdeveloper.com www.automagicdeveloper.com;

    # =================================================================
    # SSL Configuration
    # =================================================================
    # Specifies the paths to the SSL certificate and private key files.
    # These should be mounted correctly from the host's ./nginx/certs directory.
    # =================================================================

    # Path to the SSL certificate file
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    
    # Path to the SSL certificate's private key file
    ssl_certificate_key /etc/nginx/certs/privkey.pem;

    # =================================================================
    # Security Enhancements
    # =================================================================
    # These settings enhance the security of SSL/TLS connections.
    # =================================================================

    # Disable SSL protocols below TLSv1.2 for enhanced security
    ssl_protocols TLSv1.2 TLSv1.3;

    # Define strong SSL ciphers and disable outdated or insecure ones
    ssl_ciphers HIGH:!aNULL:!MD5:!3DES;

    # Enable SSL session caching for improved performance
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Enable strict transport security to enforce HTTPS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # =================================================================
    # Gzip Compression
    # =================================================================
    # Enables gzip compression to reduce the size of transmitted data,
    # improving load times and reducing bandwidth usage.
    # =================================================================

    gzip on;                                 # Enable gzip compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;  # Specify MIME types to compress
    gzip_proxied any;                        # Enable compression for all proxied requests
    gzip_min_length 256;                     # Minimum response length to compress
    gzip_comp_level 5;                       # Compression level (1-9)
    gzip_vary on;                            # Enable Vary: Accept-Encoding header

    # =================================================================
    # Proxy Buffering Configuration
    # =================================================================
    # Adjusts buffer settings to handle larger responses efficiently,
    # preventing excessive buffering to temporary files.
    # =================================================================

    proxy_buffer_size          128k;       # Size of the buffer for the first part of the response
    proxy_buffers              4 256k;     # Number and size of buffers for the response
    proxy_busy_buffers_size    256k;       # Maximum size of buffers that can be busy sending data
    proxy_temp_file_write_size 256k;       # Maximum size of data written to temporary files

    # =================================================================
    # Caching Static Assets
    # =================================================================
    # Serves static assets with appropriate caching headers to improve
    # load times for returning visitors.
    # =================================================================

    # Location block to serve static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|webp)$ {
        # Specify the root directory for static files
        root /website/static;  # Adjust this path if your static files are located elsewhere

        # Set caching headers for static assets
        expires 30d;                   # Cache static assets for 30 days
        add_header Cache-Control "public, max-age=2592000, immutable";

        # Serve the static files directly without proxying to the application
        try_files $uri $uri/ =404;
    }

    # =================================================================
    # Proxy Requests to Django Application
    # =================================================================
    # Proxies all other requests to the Django application running in the
    # 'automagic' container on port 8000.
    # =================================================================

    location / {
        # Proxy pass to the Django application container
        proxy_pass http://automagic:8000;

        # Preserve the original Host header from the client
        proxy_set_header Host $host;

        # Pass the client's real IP address to the Django application
        proxy_set_header X-Real-IP $remote_addr;

        # Pass the X-Forwarded-For header containing the client's IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Optional: Set additional proxy headers for better logging and security
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;

        # =================================================================
        # WebSocket Support (If Applicable)
        # =================================================================
        # Uncomment the following lines if your application uses WebSockets.
        # =================================================================

        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";
    }

# =====================================================================
# Additional Recommendations:
# =====================================================================
# 1. **HTTP/2 Support:**
#    - Already enabled via 'listen 443 ssl http2;'.
#    - Ensures faster multiplexing and header compression.

# 2. **Leverage Browser Caching:**
#    - Implemented via 'expires' and 'Cache-Control' headers for static assets.

# 3. **Reduce Unused JavaScript and CSS:**
#    - While Nginx can help serve static files efficiently, consider optimizing your frontend codebase to eliminate unused scripts and styles.

# 4. **Image Optimization:**
#    - Serve appropriately sized and compressed images.
#    - Use modern formats like WebP for better compression.
#    - Implement lazy loading to defer off-screen images.

# 5. **Minimize Main-Thread Work:**
#    - Optimize JavaScript execution time.
#    - Consider code-splitting and asynchronous loading where feasible.

# 6. **Implement Content Delivery Network (CDN):**
#    - Offload static assets to a CDN to reduce server load and improve delivery speeds globally.

# 7. **Enable Brotli Compression (Optional):**
#    - Brotli offers better compression ratios than gzip.
#    - Requires Nginx to be compiled with Brotli support or use a module.
#    - Example configuration:
#      ```
#      brotli on;
#      brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
#      ```

# 8. **Security Enhancements:**
#    - Add security headers like `Content-Security-Policy`, `X-Content-Type-Options`, `X-Frame-Options`, and `Referrer-Policy` to protect against common vulnerabilities.

# Example:
# ```
# add_header X-Content-Type-Options nosniff;
# add_header X-Frame-Options DENY;
# add_header Referrer-Policy no-referrer-when-downgrade;
# add_header Content-Security-Policy "default-src 'self';";
# ```

# =====================================================================
# End of nginx/default.conf
# =====================================================================
